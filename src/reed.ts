/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.8.0-367
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface MatrixDef {
    append: (from: string, signature: string, address: string, title: string, deck: string[], callParams: CallParams$$<'from' | 'signature' | 'address' | 'title' | 'deck'>) => number | Promise<number>;
    look: (from: string, title: string, callParams: CallParams$$<'from' | 'title'>) => string[][] | Promise<string[][]>;
}
export function registerMatrix(service: MatrixDef): void;
export function registerMatrix(serviceId: string, service: MatrixDef): void;
export function registerMatrix(peer: FluencePeer, service: MatrixDef): void;
export function registerMatrix(peer: FluencePeer, serviceId: string, service: MatrixDef): void;
       

export function registerMatrix(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "Matrix",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "append" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "from" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "signature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "title" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "deck" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    ]
                }
            },
            "look" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "from" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "title" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface ReviewsDef {
    getAll: (session: string, callParams: CallParams$$<'session'>) => number[] | Promise<number[]>;
    getReduced: (session: string, callParams: CallParams$$<'session'>) => number | Promise<number>;
    isUnique: (session: string, callParams: CallParams$$<'session'>) => boolean | Promise<boolean>;
    post: (from: string, session: string, signature: string, address: string, rating: number, callParams: CallParams$$<'from' | 'session' | 'signature' | 'address' | 'rating'>) => string | Promise<string>;
}
export function registerReviews(service: ReviewsDef): void;
export function registerReviews(serviceId: string, service: ReviewsDef): void;
export function registerReviews(peer: FluencePeer, service: ReviewsDef): void;
export function registerReviews(peer: FluencePeer, serviceId: string, service: ReviewsDef): void;
       

export function registerReviews(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "Reviews",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "getAll" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "session" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "u64"
                            }
                        }
                    ]
                }
            },
            "getReduced" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "session" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    ]
                }
            },
            "isUnique" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "session" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            },
            "post" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "from" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "session" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "signature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "rating" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function postReview(
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    signature: string,
    address: string,
    rating: number,
    config?: {ttl?: number}
): Promise<string>;

export function postReview(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    signature: string,
    address: string,
    rating: number,
    config?: {ttl?: number}
): Promise<string>;

export function postReview(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                              )
                              (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                             )
                             (call %init_peer_id% ("getDataSrv" "session") [] session)
                            )
                            (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                           )
                           (call %init_peer_id% ("getDataSrv" "address") [] address)
                          )
                          (call %init_peer_id% ("getDataSrv" "rating") [] rating)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Reviews" "post") [%init_peer_id% session signature address rating] res)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "postReview",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "session" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "address" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "rating" : {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getRelayTime(
    relayPeerId: string,
    config?: {ttl?: number}
): Promise<number>;

export function getRelayTime(
    peer: FluencePeer,
    relayPeerId: string,
    config?: {ttl?: number}
): Promise<number>;

export function getRelayTime(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call relayPeerId ("peer" "timestamp_ms") [] ts)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ts])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getRelayTime",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getReducedReviews(
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    config?: {ttl?: number}
): Promise<number>;

export function getReducedReviews(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    config?: {ttl?: number}
): Promise<number>;

export function getReducedReviews(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                           )
                           (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                          )
                          (call %init_peer_id% ("getDataSrv" "session") [] session)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Reviews" "getReduced") [session] res)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getReducedReviews",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "session" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function addDeck(
    targetPeerId: string,
    targetRelayPeerId: string,
    address: string,
    signature: string,
    title: string,
    deck: string[],
    config?: {ttl?: number}
): Promise<number>;

export function addDeck(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    address: string,
    signature: string,
    title: string,
    deck: string[],
    config?: {ttl?: number}
): Promise<number>;

export function addDeck(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                              )
                              (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                             )
                             (call %init_peer_id% ("getDataSrv" "address") [] address)
                            )
                            (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                           )
                           (call %init_peer_id% ("getDataSrv" "title") [] title)
                          )
                          (call %init_peer_id% ("getDataSrv" "deck") [] deck)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Matrix" "append") [targetPeerId signature address title deck] res)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "addDeck",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "address" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "title" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "deck" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getUniqueness(
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function getUniqueness(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function getUniqueness(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                           )
                           (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                          )
                          (call %init_peer_id% ("getDataSrv" "session") [] session)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Reviews" "isUnique") [session] res)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getUniqueness",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "session" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getAllReviews(
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    config?: {ttl?: number}
): Promise<number[]>;

export function getAllReviews(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    session: string,
    config?: {ttl?: number}
): Promise<number[]>;

export function getAllReviews(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                           )
                           (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                          )
                          (call %init_peer_id% ("getDataSrv" "session") [] session)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Reviews" "getAll") [session] res)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getAllReviews",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "session" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u64"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function deckUnwrap(
    targetPeerId: string,
    targetRelayPeerId: string,
    title: string,
    config?: {ttl?: number}
): Promise<string[][]>;

export function deckUnwrap(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    title: string,
    config?: {ttl?: number}
): Promise<string[][]>;

export function deckUnwrap(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                           )
                           (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                          )
                          (call %init_peer_id% ("getDataSrv" "title") [] title)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (call targetRelayPeerId ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call targetPeerId ("Matrix" "look") [targetPeerId title] res)
                          (call targetRelayPeerId ("op" "noop") [])
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (call targetRelayPeerId ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "deckUnwrap",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "targetRelayPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "title" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "array",
                        "type" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
